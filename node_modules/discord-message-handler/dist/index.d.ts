// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../discord.js

declare module 'discord-message-handler' {
    import { Message } from "discord.js";
    import { HandlerBuilder } from "discord-message-handler/handler-builder";
    import { LogCallback } from "discord-message-handler/callbacks";
    export class MessageHandler {
        constructor(context?: MessageHandler);
        log(messageType: number, filter: string, message: Message): void;
        setCaseSensitive(isCaseSensitive: boolean): void;
        enableLogging(logFn: LogCallback): void;
        whenMessageContains(text: string): HandlerBuilder;
        whenMessageContainsExact(text: string): HandlerBuilder;
        whenMessageContainsWord(text: string): HandlerBuilder;
        whenMessageContainsOne(array: string[]): HandlerBuilder;
        whenMessageStartsWith(text: string): HandlerBuilder;
        whenMessageEndsWith(text: string): HandlerBuilder;
        onCommand(text: string): HandlerBuilder;
        handleMessage(discordMessage: Message): void;
    }
}

declare module 'discord-message-handler/handler-builder' {
    import { SimpleCallback, CommandCallback } from "discord-message-handler/callbacks";
    export class HandlerConfig {
            type: number;
            query: string | string[];
            action: number;
            actionArgs: any[];
            callback: SimpleCallback | CommandCallback;
            aliases: string[];
            minArgs: number;
            matches: string | RegExp;
            errorMessage: string;
            chance: number;
            deleteTimer: number;
    }
    export class HandlerBuilder {
            handler: HandlerConfig;
            constructor();
            type(type: number): this;
            query(query: string | string[]): this;
            reply(text: string): void;
            /**
                * @deprecated Use `sometimes(chance)` instead.
                */
            replySometimes(text: string, chance: number): void;
            replyOne(array: string[]): void;
            then(callback: SimpleCallback): void;
            do(callback: CommandCallback): void;
            matches(regex: string | RegExp): this;
            minArgs(count: number): this;
            alias(alt: string): this;
            whenInvalid(message: string): this;
            sometimes(chance: number): this;
            /**
                * Delete the message that triggered this command
                * @param time Time in milliseconds
                */
            deleteInvocation(time?: number): this;
    }
}

declare module 'discord-message-handler/callbacks' {
    import { Message } from "discord.js";
    export interface SimpleCallback {
        (message: Message): void;
    }
    export interface CommandCallback {
        (args: string[], rawArgs: string, message: Message): void;
    }
    export interface LogCallback {
        (messageType: string, filter: string, message: Message): void;
    }
}

